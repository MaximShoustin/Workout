#!/usr/bin/env python3
"""
Workout CLI - Command Line Interface for Workout Generation
===========================================================

A comprehensive CLI tool for generating, managing, and tracking workouts.

Usage:
    ./workout                    # Generate a new workout
    ./workout -status           # List all existing exercises
    ./workout -help             # Show this help message
    ./workout -add              # Add a new exercise to the database
    ./workout -edit <ids>       # Edit specific exercises by ID (comma-separated)
    ./workout -include <ids>    # Include specific exercises by ID (comma-separated)

Examples:
    ./workout -status
    ./workout -edit 101,102,103
    ./workout -include 88,94,96
    ./workout -add
"""

import sys
import argparse
import json
from pathlib import Path
from typing import List, Dict, Set

# Add current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from config import load_json, EQUIP_DIR
from equipment import parse_equipment, build_station_pool
from html_generator import format_exercise_link


def show_help():
    """Display comprehensive help information."""
    help_text = """
üèãÔ∏è  WORKOUT CLI - Command Line Interface
========================================

USAGE:
    ./workout [COMMAND] [OPTIONS]

COMMANDS:
    (no command)        Generate a new workout with current settings
    -status            List all existing exercises in the database
    -view-all          Generate HTML table of all exercises
    -help              Show this help message
    -add               Add a new exercise to the database (interactive)
    -edit <ids>        Edit specific exercises in current workout by ID
    -include <ids>     Force include specific exercises by ID in new workout

OPTIONS for -edit and -include:
    <ids>              Comma-separated list of exercise IDs (e.g., 101,102,103)

EXAMPLES:
    ./workout                     # Generate new workout
    ./workout -status             # List all exercises
    ./workout -view-all           # Generate HTML table of all exercises
    ./workout -help               # Show this help
    ./workout -add                # Add new exercise (interactive)
    ./workout -edit 101,102       # Replace exercises 101,102 in current workout
    ./workout -include 88,94,96   # Force include exercises 88,94,96 in new workout

CONFIGURATION:
    Edit config/plan.json to customize:
    - Number of stations and people
    - Equipment inventory
    - Active rest settings
    - Balance order (upper/lower/core)
    - Exercise history tracking

FILES:
    config/plan.json             Main configuration file
    equipment/*.json             Exercise databases by equipment type
    index.html                   Generated workout display
    workout_store/               Workout history and data

For more information, see README.md
"""
    print(help_text)


def get_all_exercises() -> List[Dict]:
    """Get all exercises from all equipment files."""
    all_exercises = []
    
    # Parse equipment to get all exercises
    try:
        gear = parse_equipment()
        station_pool = build_station_pool(gear)
        
        # Convert tuples to dictionaries for easier handling
        for exercise_tuple in station_pool:
            area, equip_name, exercise_name, exercise_link, equipment_data, muscles, unilateral, exercise_id, video_type = exercise_tuple
            
            exercise_dict = {
                'id': exercise_id,
                'name': exercise_name,
                'area': area,
                'equipment': equip_name,
                'muscles': muscles,
                'unilateral': unilateral,
                'link': exercise_link,
                'video_type': video_type,
                'equipment_requirements': equipment_data
            }
            all_exercises.append(exercise_dict)
    
    except Exception as e:
        print(f"‚ùå Error loading exercises: {e}")
        return []
    
    return all_exercises


def generate_exercises_html():
    """Generate HTML file with table of all available exercises."""
    from datetime import datetime
    from pathlib import Path
    
    print("üèãÔ∏è  GENERATING EXERCISES HTML TABLE")
    print("=" * 50)
    print()
    
    exercises = get_all_exercises()
    
    if not exercises:
        print("‚ùå No exercises found in database.")
        return
    
    # Sort exercises by area and then by name
    exercises.sort(key=lambda x: (x['area'], x['name']))
    
    # Group exercises by area
    by_area = {}
    for exercise in exercises:
        area = exercise['area']
        if area not in by_area:
            by_area[area] = []
        by_area[area].append(exercise)
    
    # Generate timestamp for filename
    timestamp = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    filename = f"EXERCISES_{timestamp}.html"
    filepath = Path("workout_store") / filename
    
    # Ensure workout_store directory exists
    Path("workout_store").mkdir(exist_ok=True)
    
    # Generate HTML content
    html_content_root = generate_exercises_html_content(by_area, exercises, "config/pictures")
    html_content_store = generate_exercises_html_content(by_area, exercises, "../config/pictures")
    
    # Save to file in workout_store (with relative path to ../config/pictures)
    with filepath.open('w', encoding='utf-8') as f:
        f.write(html_content_store)
    
    # Also save to exercises.html in project root (with path to config/pictures)
    exercises_path = Path("exercises.html")
    with exercises_path.open('w', encoding='utf-8') as f:
        f.write(html_content_root)
    
    print(f"‚úÖ Exercises HTML saved to: {filepath}")
    print(f"üåê Also saved to: exercises.html")
    print(f"üìä Total exercises: {len(exercises)}")
    print(f"üéØ Areas covered: {', '.join(sorted(by_area.keys()))}")
    print()


def generate_exercises_html_content(by_area: dict, all_exercises: list, pictures_path: str = "config/pictures") -> str:
    """Generate the HTML content for exercises table."""
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    total_exercises = len(all_exercises)
    
    # Count exercises by area
    area_counts = {area: len(exercises) for area, exercises in by_area.items()}
    
    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Exercises - Workout Database</title>
    <style>
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }}
        
        .header {{
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 3px solid #667eea;
            padding-bottom: 20px;
        }}
        
        .header h1 {{
            color: #2c3e50;
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        
        .stats {{
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 20px 0;
            flex-wrap: wrap;
        }}
        
        .stat {{
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            text-align: center;
            min-width: 120px;
        }}
        
        .stat-number {{
            font-size: 2em;
            font-weight: bold;
            display: block;
        }}
        
        .stat-label {{
            font-size: 0.9em;
            opacity: 0.9;
        }}
        
        .area-section {{
            margin: 40px 0;
        }}
        
        .area-title {{
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 25px;
            border-radius: 8px 8px 0 0;
            margin: 0;
            font-size: 1.5em;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        
        .exercises-grid {{
            display: grid;
            gap: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 0 0 8px 8px;
        }}
        
        /* Mobile: 2 columns for better spacing */
        @media (max-width: 480px) {{
            .exercises-grid {{
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
                padding: 15px;
            }}
        }}
        
        /* Small tablets: 3 columns */
        @media (min-width: 481px) and (max-width: 768px) {{
            .exercises-grid {{
                grid-template-columns: repeat(3, 1fr);
                gap: 18px;
                padding: 18px;
            }}
        }}
        
        /* Large tablets and Desktop: 4 columns for better balance */
        @media (min-width: 769px) and (max-width: 1200px) {{
            .exercises-grid {{
                grid-template-columns: repeat(4, 1fr);
                gap: 20px;
            }}
        }}
        
        /* Large Desktop: 6 columns */
        @media (min-width: 1201px) {{
            .exercises-grid {{
                grid-template-columns: repeat(6, 1fr);
                gap: 20px;
            }}
        }}
        
        .exercise-card {{
            background: white;
            border-radius: 12px;
            padding: 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            border-left: 4px solid #667eea;
            display: flex;
            flex-direction: column;
            min-height: 270px;
            max-height: 270px;
            overflow: hidden;
            position: relative;
        }}
        
        .exercise-card:hover {{
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            border-left-color: #764ba2;
        }}
        
        .exercise-image {{
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }}
        
        .exercise-images {{
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            display: flex;
            flex-direction: row;
            gap: 2px;
        }}
        
        .exercise-images img {{
            flex: 1;
            width: 0;
            height: 100%;
            object-fit: cover;
            display: block;
        }}
        
        .exercise-content {{
            position: relative;
            z-index: 2;
            background: linear-gradient(transparent 0%, rgba(0,0,0,0.1) 40%, rgba(0,0,0,0.8) 100%);
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 16px;
        }}
        
        .exercise-details {{
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        }}
        
        .exercise-header {{
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
            flex-wrap: wrap;
        }}
        
        .exercise-id {{
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.75em;
            font-weight: bold;
            display: inline-block;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            flex-shrink: 0;
        }}
        
        .exercise-name {{
            font-weight: 600;
            color: white;
            font-size: 0.85em;
            line-height: 1.2;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
            flex: 1;
            min-width: 0;
        }}
        
        .exercise-link {{
            color: white;
            text-decoration: none;
            transition: all 0.2s ease;
        }}
        
        .exercise-link:hover {{
            color: #ffd700;
            text-shadow: 0 0 8px rgba(255,215,0,0.6);
        }}
        
        .exercise-card.no-image .exercise-link {{
            color: #667eea;
        }}
        
        .exercise-card.no-image .exercise-link:hover {{
            color: #764ba2;
            text-shadow: none;
            text-decoration: underline;
        }}
        
        .exercise-equipment {{
            background: rgba(255,255,255,0.9);
            color: #2c5aa0;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.7em;
            margin-bottom: 3px;
            display: inline-block;
            font-weight: 500;
        }}
        
        .exercise-muscles {{
            color: rgba(255,255,255,0.9);
            font-size: 0.65em;
            font-style: italic;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp: 1;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        }}
        
        .exercise-card.no-image {{
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        }}
        
        .exercise-card.no-image .exercise-content {{
            background: none;
        }}
        
        .exercise-card.no-image .exercise-details {{
            color: #333;
            text-shadow: none;
        }}
        
        .exercise-card.no-image .exercise-name {{
            color: #2c3e50;
            text-shadow: none;
        }}
        
        .exercise-card.no-image .exercise-muscles {{
            color: #666;
            text-shadow: none;
        }}
        
        .unilateral-badge {{
            background: #ff6b6b;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.7em;
            font-weight: bold;
            margin-left: 5px;
        }}
        
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 2px solid #e9ecef;
            color: #666;
            font-size: 0.9em;
        }}
        
        /* Video popup styles */
        .video-popup {{
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
        }}
        
        .video-content {{
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 800px;
            background: white;
            border-radius: 10px;
            padding: 20px;
        }}
        
        .close-video {{
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }}
        
        .close-video:hover {{
            color: #000;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üèãÔ∏è Exercise Database</h1>
            <p>Complete collection of available exercises</p>
            <div class="stats">
                <div class="stat">
                    <span class="stat-number">{total_exercises}</span>
                    <span class="stat-label">Total Exercises</span>
                </div>"""
    
    # Add area stats
    for area, count in sorted(area_counts.items()):
        area_emoji = {"upper": "üí™", "lower": "ü¶µ", "core": "üî•"}.get(area, "üèãÔ∏è")
        html += f"""
                <div class="stat">
                    <span class="stat-number">{count}</span>
                    <span class="stat-label">{area_emoji} {area.title()}</span>
                </div>"""
    
    html += f"""
            </div>
            <p style="color: #666; margin-top: 15px;">Generated on {timestamp}</p>
        </div>
"""
    
    # Generate sections for each area
    area_emojis = {"upper": "üí™", "lower": "ü¶µ", "core": "üî•"}
    
    for area in sorted(by_area.keys()):
        exercises = by_area[area]
        area_emoji = area_emojis.get(area, "üèãÔ∏è")
        
        html += f"""
        <div class="area-section">
            <h2 class="area-title">{area_emoji} {area.upper()} ({len(exercises)} exercises)</h2>
            <div class="exercises-grid">"""
        
        for exercise in exercises:
            # For the exercises view, we want to display images directly in cards
            # So we don't use format_exercise_link which adds popup images
            exercise_name = exercise['name']
            
            # Add video link if available
            if exercise['link'] and exercise['link'] != "some url" and exercise['link'].strip():
                exercise_name = f'<a href="{exercise["link"]}" target="_blank" class="exercise-link">{exercise_name}</a>'
            
            # Check if images exist for this exercise (single or multiple)
            image_html = ""
            card_class = "exercise-card"
            if exercise['id'] != -1:
                from pathlib import Path
                
                # First check for single image (original format)
                single_image_path = Path("config/pictures") / f"{exercise['id']}.png"
                
                # Then check for multiple images (new format: id_1.png, id_2.png, etc.)
                multiple_images = []
                for i in range(1, 4):  # Check for up to 3 images (_1, _2, _3)
                    multi_image_path = Path("config/pictures") / f"{exercise['id']}_{i}.png"
                    if multi_image_path.exists():
                        multiple_images.append(f"{pictures_path}/{exercise['id']}_{i}.png")
                
                if multiple_images:
                    # Use multiple images
                    images_html = ""
                    for img_src in multiple_images:
                        images_html += f'<img src="{img_src}" alt="{exercise["name"]}" onerror="this.style.display=\'none\'">'
                    image_html = f'<div class="exercise-images">{images_html}</div>'
                elif single_image_path.exists():
                    # Use single image (backward compatibility)
                    image_html = f'<img src="{pictures_path}/{exercise["id"]}.png" alt="{exercise["name"]}" class="exercise-image" onerror="this.style.display=\'none\'">'
                else:
                    card_class = "exercise-card no-image"
            else:
                card_class = "exercise-card no-image"
            
            # Format muscles list
            muscles = exercise['muscles']
            if isinstance(muscles, list):
                muscles_str = ', '.join(muscles)
            else:
                muscles_str = muscles
            
            # Truncate long muscle lists
            if len(muscles_str) > 50:
                muscles_str = muscles_str[:47] + "..."
            
            # Equipment display name
            equipment_display = exercise['equipment'].replace('_', ' ').title()
            
            unilateral_badge = '<span class="unilateral-badge">U</span>' if exercise['unilateral'] else ''
            
            html += f"""
                <div class="{card_class}">
                    {image_html}
                    <div class="exercise-content">
                        <div class="exercise-details">
                            <div class="exercise-header">
                                <div class="exercise-id">{exercise['id'] if exercise['id'] != -1 else '--'}</div>
                                <div class="exercise-name">
                                    {exercise_name}{unilateral_badge}
                                </div>
                            </div>
                            <div class="exercise-muscles">{muscles_str}</div>
                        </div>
                    </div>
                </div>"""
        
        html += """
            </div>
        </div>"""
    
    html += f"""
        <div class="footer">
            <p><strong>Legend:</strong> <span class="unilateral-badge">U</span> = Unilateral exercise (requires left/right execution)</p>
            <p>Click exercise names with links to view demonstration videos</p>
            <p>Generated by Workout CLI ‚Ä¢ {timestamp}</p>
        </div>
    </div>
    
    <script>
        // Video popup functionality
        function openVideo(videoId) {{
            document.getElementById(videoId).style.display = 'block';
        }}
        
        function closeVideo(videoId) {{
            document.getElementById(videoId).style.display = 'none';
            // Stop any playing videos
            const iframe = document.querySelector('#' + videoId + ' iframe');
            if (iframe) {{
                iframe.src = iframe.src;
            }}
            const video = document.querySelector('#' + videoId + ' video');
            if (video) {{
                video.pause();
            }}
        }}
        
        // Close video when clicking outside
        window.onclick = function(event) {{
            if (event.target.classList.contains('video-popup')) {{
                event.target.style.display = 'none';
                // Stop any playing videos
                const iframe = event.target.querySelector('iframe');
                if (iframe) {{
                    iframe.src = iframe.src;
                }}
                const video = event.target.querySelector('video');
                if (video) {{
                    video.pause();
                }}
            }}
        }}
    </script>
</body>
</html>"""
    
    return html


def show_status():
    """Display status of all existing exercises."""
    print("üìä WORKOUT DATABASE STATUS")
    print("=" * 50)
    print()
    
    exercises = get_all_exercises()
    
    if not exercises:
        print("‚ùå No exercises found in database.")
        return
    
    # Group exercises by area and equipment
    by_area = {}
    by_equipment = {}
    
    for exercise in exercises:
        area = exercise['area']
        equipment = exercise['equipment']
        
        if area not in by_area:
            by_area[area] = []
        by_area[area].append(exercise)
        
        if equipment not in by_equipment:
            by_equipment[equipment] = []
        by_equipment[equipment].append(exercise)
    
    # Summary statistics
    total_exercises = len(exercises)
    valid_id_exercises = len([ex for ex in exercises if ex['id'] != -1])
    unilateral_exercises = len([ex for ex in exercises if ex['unilateral']])
    
    print(f"üìà SUMMARY:")
    print(f"   Total Exercises: {total_exercises}")
    print(f"   With Valid IDs:  {valid_id_exercises}")
    print(f"   Unilateral:      {unilateral_exercises}")
    print(f"   Areas:           {len(by_area)}")
    print(f"   Equipment Types: {len(by_equipment)}")
    print()
    
    # Show exercises by area
    print("üéØ BY AREA:")
    print("-" * 30)
    for area in sorted(by_area.keys()):
        exercises_in_area = by_area[area]
        print(f"  {area.upper()} ({len(exercises_in_area)} exercises):")
        
        # Sort by ID for consistent display
        exercises_in_area.sort(key=lambda x: x['id'] if x['id'] != -1 else 9999)
        
        for exercise in exercises_in_area:
            id_str = f"ID:{exercise['id']:3d}" if exercise['id'] != -1 else "ID: --"
            unilateral_str = " [U]" if exercise['unilateral'] else "    "
            equipment_str = f"({exercise['equipment']})"
            print(f"    {id_str}{unilateral_str} {exercise['name']:<35} {equipment_str}")
        print()
    
    # Show exercises by equipment
    print("üõ†Ô∏è  BY EQUIPMENT:")
    print("-" * 30)
    for equipment in sorted(by_equipment.keys()):
        exercises_with_equipment = by_equipment[equipment]
        print(f"  {equipment.upper().replace('_', ' ')} ({len(exercises_with_equipment)} exercises):")
        
        # Sort by ID for consistent display
        exercises_with_equipment.sort(key=lambda x: x['id'] if x['id'] != -1 else 9999)
        
        for exercise in exercises_with_equipment:
            id_str = f"ID:{exercise['id']:3d}" if exercise['id'] != -1 else "ID: --"
            unilateral_str = " [U]" if exercise['unilateral'] else "    "
            area_str = f"({exercise['area']})"
            print(f"    {id_str}{unilateral_str} {exercise['name']:<35} {area_str}")
        print()
    
    # Show exercises with missing IDs
    missing_id_exercises = [ex for ex in exercises if ex['id'] == -1]
    if missing_id_exercises:
        print("‚ö†Ô∏è  EXERCISES WITHOUT IDs:")
        print("-" * 30)
        for exercise in missing_id_exercises:
            unilateral_str = " [U]" if exercise['unilateral'] else "    "
            print(f"    {unilateral_str} {exercise['name']:<35} ({exercise['equipment']}, {exercise['area']})")
        print()
    
    print("üí° LEGEND:")
    print("   [U] = Unilateral exercise (requires left/right execution)")
    print("   ID  = Exercise ID for use with -edit and -include commands")
    print()


def parse_id_list(id_string: str) -> List[int]:
    """Parse comma-separated list of exercise IDs."""
    try:
        ids = []
        for id_str in id_string.split(','):
            id_str = id_str.strip()
            if id_str:
                ids.append(int(id_str))
        return ids
    except ValueError:
        print(f"‚ùå Error: Invalid ID format '{id_string}'. Use comma-separated integers (e.g., 101,102,103)")
        sys.exit(1)


def validate_exercise_ids(ids: List[int]) -> List[int]:
    """Validate that exercise IDs exist in the database."""
    exercises = get_all_exercises()
    valid_ids = {ex['id'] for ex in exercises if ex['id'] != -1}
    
    validated_ids = []
    invalid_ids = []
    
    for exercise_id in ids:
        if exercise_id in valid_ids:
            validated_ids.append(exercise_id)
        else:
            invalid_ids.append(exercise_id)
    
    if invalid_ids:
        print(f"‚ö†Ô∏è  Warning: The following exercise IDs were not found: {invalid_ids}")
        print("   Use './workout -status' to see all available exercise IDs.")
        
        if not validated_ids:
            print("‚ùå Error: No valid exercise IDs provided.")
            sys.exit(1)
        
        print(f"‚úÖ Proceeding with valid IDs: {validated_ids}")
    
    return validated_ids


def main():
    """Main CLI entry point."""
    # Handle no arguments - generate workout
    if len(sys.argv) == 1:
        # Import and run main workout generation
        from main import main as workout_main
        workout_main()
        return
    
    # Parse command line arguments
    command = sys.argv[1].lower()
    
    if command in ['-h', '--help', '-help', 'help']:
        show_help()
    
    elif command in ['-s', '--status', '-status', 'status']:
        show_status()
    
    elif command in ['-v', '--view-all', '-view-all', 'view-all']:
        generate_exercises_html()
    
    elif command in ['-a', '--add', '-add', 'add']:
        # Import and run exercise addition
        from exercise_manager import add_exercise_cli
        add_exercise_cli()
    
    elif command in ['-e', '--edit', '-edit', 'edit']:
        if len(sys.argv) < 3:
            print("‚ùå Error: -edit command requires exercise IDs.")
            print("   Usage: ./workout -edit <ids>")
            print("   Example: ./workout -edit 101,102,103")
            sys.exit(1)
        
        # Parse and validate IDs
        id_string = sys.argv[2]
        exercise_ids = parse_id_list(id_string)
        validated_ids = validate_exercise_ids(exercise_ids)
        
        print(f"üîÑ Editing exercises: {validated_ids}")
        
        # Set up arguments for main script
        sys.argv = ['main.py', '-edit', ','.join(map(str, validated_ids))]
        
        # Import and run main with edit mode
        from main import main as workout_main
        workout_main()
    
    elif command in ['-i', '--include', '-include', 'include']:
        if len(sys.argv) < 3:
            print("‚ùå Error: -include command requires exercise IDs.")
            print("   Usage: ./workout -include <ids>")
            print("   Example: ./workout -include 88,94,96")
            sys.exit(1)
        
        # Parse and validate IDs
        id_string = sys.argv[2]
        exercise_ids = parse_id_list(id_string)
        validated_ids = validate_exercise_ids(exercise_ids)
        
        print(f"üéØ Including exercises: {validated_ids}")
        
        # Set up arguments for main script
        sys.argv = ['main.py', '-include', ','.join(map(str, validated_ids))]
        
        # Import and run main with include mode
        from main import main as workout_main
        workout_main()
    
    else:
        print(f"‚ùå Error: Unknown command '{command}'")
        print("   Use './workout -help' to see available commands.")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüö´ Operation cancelled by user.")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)
